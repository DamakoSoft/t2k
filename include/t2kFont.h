// t2k - Tatsuko Driver is a software library designed to drive game development.
// Copyright (C) Damako Soft since 2020, all rights reserved.
// current version is ver. 0.1.
//
// Damako Soft staff:
// 	Da: Daizo Sasaki
// 	Ma: yoshiMasa Sugawara
// 	Ko: Koji Saito
//
// If you are interested in t2k, please follow our Twitter account @DamakoSoft 
//
// These software come with absolutory no warranty and are released under the
// MIT License.  see https://opensource.org/licenses/MIT

#ifndef __T2K_FONT_H__
#define __T2K_FONT_H__

struct Font {
	uint8_t pattern[8];
};

#ifndef T2K_DO_NOT_DEFINE_FONT
const Font kComputerfontFace[96]={
	{ 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00 },	// space
	{ 0x30,0x30,0x30,0x38, 0x38,0x00,0x38,0x00 },	// !
	{ 0xEE,0xEE,0x22,0x00, 0x00,0x00,0x00,0x00 },	// "
	{ 0x4C,0x4C,0xFE,0x4C, 0x4C,0xFE,0x4C,0x00 },	// #
	{ 0x10,0xFE,0xD2,0x38, 0x9E,0xFE,0x10,0x00 },	// $
	{ 0xE2,0xE2,0x02,0xFE, 0xE0,0xEE,0xEE,0x00 },	// %
	{ 0x78,0x60,0x64,0xFE, 0xE4,0xE4,0xFC,0x00 },	// &
	{ 0x38,0x38,0x08,0x00, 0x00,0x00,0x00,0x00 },	// '
	{ 0x3C,0x60,0x60,0x70, 0x70,0x70,0x3C,0x00 },	// (
	{ 0x3C,0x06,0x06,0x0E, 0x0E,0x0E,0x3C,0x00 },	// )
	{ 0x10,0xD6,0xD6,0x3C, 0xD6,0xD6,0x10,0x00 },	// *
	{ 0x10,0x10,0x10,0xFE, 0x10,0x10,0x10,0x00 },	// +
	{ 0x00,0x00,0x00,0x00, 0x18,0x18,0x08,0x00 },	// ,
	{ 0x00,0x00,0x00,0x7E, 0x00,0x00,0x00,0x00 },	// -
	{ 0x00,0x00,0x00,0x00, 0x00,0x38,0x38,0x00 },	// .
	{ 0x06,0x06,0x06,0xFE, 0xE0,0xE0,0xE0,0x00 },	// /

	{ 0xFE,0x86,0x86,0x8E, 0x8E,0x8E,0xFE,0x00 },	// 0
	{ 0x18,0x18,0x18,0x38, 0x38,0x38,0x38,0x00 },	// 1
	{ 0xFE,0x86,0x06,0xFE, 0xE0,0xE2,0xFE,0x00 },	// 2
	{ 0xFC,0x8C,0x0C,0x7E, 0x0E,0x8E,0xFE,0x00 },	// 3
	{ 0x8C,0x8C,0x8C,0xFE, 0x1C,0x1C,0x1C,0x00 },	// 4
	{ 0xFE,0xC0,0xC0,0xFE, 0x0E,0x8E,0xFE,0x00 },	// 5
	{ 0xFE,0x86,0x80,0xFE, 0x8E,0x8E,0xFE,0x00 },	// 6
	{ 0xFE,0x86,0x06,0x0E, 0x0E,0x0E,0x0E,0x00 },	// 7
	{ 0x7C,0x4C,0x4C,0xFE, 0x8E,0x8E,0xFE,0x00 },	// 8
	{ 0xFE,0x86,0x86,0xFE, 0x0E,0x0E,0x0E,0x00 },	// 9

	{ 0x18,0x18,0x00,0x00, 0x18,0x18,0x00,0x00 },	// :
	{ 0x18,0x18,0x00,0x00, 0x18,0x18,0x08,0x00 },	// ;
	{ 0x0C,0x18,0x30,0x60, 0x30,0x18,0x0C,0x00 },	// <
	{ 0x00,0x7E,0x00,0x00, 0x7E,0x00,0x00,0x00 },	// =
	{ 0x30,0x18,0x0C,0x06, 0x0C,0x18,0x30,0x00 },	// >
	{ 0xFE,0x86,0x06,0x3E, 0x38,0x00,0x38,0x00 },	// ?
	{ 0xFE,0x82,0x9A,0xDA, 0xDE,0xC0,0xFE,0x00 },	// @

	{ 0x00,0x7C,0x74,0x74, 0xFE,0xE2,0xE2,0xE2 },	// A
	{ 0x00,0xFC,0xC4,0xC4, 0xFE,0xE2,0xE2,0xFE },	// B
	{ 0x00,0xFE,0xC2,0xC0, 0xE0,0xE0,0xE2,0xFE },	// C
	{ 0x00,0xFE,0xC2,0xC2, 0xE2,0xE2,0xE2,0xFE },	// D
	{ 0x00,0xFE,0xC0,0xC0, 0xFE,0xE0,0xE0,0xFE },	// E
	{ 0x00,0xFE,0xC0,0xC0, 0xFE,0xE0,0xE0,0xE0 },	// F
	{ 0x00,0xFE,0xC2,0xC0, 0xE6,0xE2,0xE2,0xFE },	// G
	{ 0x00,0xC2,0xC2,0xC2, 0xFE,0xE2,0xE2,0xE2 },	// H
	{ 0x00,0x30,0x30,0x30, 0x38,0x38,0x38,0x38 },	// I
	{ 0x00,0x0C,0x0C,0x0C, 0x0E,0x8E,0x8E,0xFE },	// J
	{ 0x00,0xC6,0xCC,0xD8, 0xF0,0xF8,0xEC,0xE6 },	// K
	{ 0x00,0xC0,0xC0,0xC0, 0xE0,0xE0,0xE0,0xFE },	// L
	{ 0x00,0xFE,0xCA,0xCA, 0xEA,0xEA,0xEA,0xEA },	// M
	{ 0x00,0xFE,0xC2,0xC2, 0xE2,0xE2,0xE2,0xE2 },	// N
	{ 0x00,0xFE,0x8E,0x8E, 0x8E,0x86,0x86,0xFE },	// O
	{ 0x00,0xFE,0xC2,0xC2, 0xFE,0xE0,0xE0,0xE0 },	// P
	{ 0x00,0xFE,0x86,0x86, 0x86,0x86,0x8E,0xFE },	// Q
	{ 0x00,0xFC,0xC4,0xC4, 0xCC,0xF8,0xEC,0xE6 },	// R
	{ 0x00,0xFE,0xC2,0xC0, 0xFE,0x0E,0x8E,0xFE },	// S
	{ 0x00,0xFE,0x30,0x30, 0x38,0x38,0x38,0x38 },	// T
	{ 0x00,0xC2,0xC2,0xC2, 0xE2,0xE2,0xE2,0xFE },	// U
	{ 0x00,0xE2,0xE2,0xE2, 0xE2,0x66,0x64,0x7C },	// V
	{ 0x00,0xCA,0xCA,0xCA, 0xEA,0xEA,0xEA,0xFE },	// W
	{ 0x00,0xC2,0xC2,0x64, 0x38,0x74,0xE2,0xE2 },	// X
	{ 0x00,0x82,0x82,0x82, 0xFE,0x38,0x38,0x38 },	// Y
	{ 0x00,0xFE,0x8E,0x3C, 0x70,0xE0,0xE2,0xFE },	// Z

	{ 0x00,0x38,0x20,0x20, 0x20,0x20,0x20,0x38 },	// [
	{ 0x00,0xC0,0xC0,0xC0, 0xFE,0x0E,0x0E,0x0E },	// back slash
	{ 0x00,0x1C,0x04,0x04, 0x04,0x04,0x04,0x1C },	// ]
	{ 0x00,0x3C,0x24,0x00, 0x00,0x00,0x00,0x00 },	// ^
	{ 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0xFE },	// _
	{ 0x00,0x38,0x08,0x00, 0x00,0x00,0x00,0x00 },	// `

	{ 0x00,0x00,0x7C,0x44, 0x04,0x7E,0x66,0x7E },	// a
	{ 0x00,0x40,0x40,0x7C, 0x44,0x64,0x64,0x7C },	// b
	{ 0x00,0x00,0x00,0x7C, 0x44,0x60,0x64,0x7C },	// c
	{ 0x00,0x04,0x04,0x7C, 0x44,0x4C,0x4C,0x7C },	// d
	{ 0x00,0x00,0x7E,0x62, 0x7E,0x60,0x72,0x7E },	// e
	{ 0x00,0x1C,0x10,0x7C, 0x10,0x18,0x18,0x18 },	// f
	{ 0x00,0x00,0x7C,0x64, 0x74,0x7C,0x04,0x7C },	// g
	{ 0x00,0x40,0x40,0x7C, 0x44,0x64,0x64,0x64 },	// h
	{ 0x00,0x10,0x00,0x10, 0x10,0x18,0x18,0x18 },	// i
	{ 0x00,0x10,0x00,0x10, 0x18,0x18,0x18,0x70 },	// j
	{ 0x00,0x20,0x20,0x2C, 0x58,0x70,0x78,0x6C },	// k
	{ 0x00,0x30,0x30,0x10, 0x10,0x18,0x18,0x18 },	// l
	{ 0x00,0x00,0xFE,0x92, 0x92,0xDA,0xDA,0xDA },	// m
	{ 0x00,0x00,0x7C,0x44, 0x44,0x64,0x64,0x64 },	// n
	{ 0x00,0x00,0x7C,0x44, 0x44,0x64,0x64,0x7C },	// o
	{ 0x00,0x7C,0x44,0x64, 0x64,0x7C,0x40,0x40 },	// p
	{ 0x00,0x7C,0x44,0x64, 0x64,0x7C,0x04,0x04 },	// q
	{ 0x00,0x7C,0x40,0x60, 0x60,0x60,0x00,0x00 },	// r
	{ 0x00,0x7C,0x64,0x60, 0x7C,0x0C,0x4C,0x7C },	// s
	{ 0x00,0x10,0x7C,0x10, 0x18,0x18,0x18,0x00 },	// t
	{ 0x00,0x00,0x44,0x44, 0x64,0x64,0x7C,0x00 },	// u
	{ 0x00,0x00,0x64,0x64, 0x6C,0x28,0x38,0x00 },	// v
	{ 0x00,0x00,0x92,0x92, 0xDA,0xDA,0xFE,0x00 },	// w
	{ 0x00,0x00,0x44,0x44, 0x38,0x64,0x64,0x00 },	// x
	{ 0x00,0x00,0x64,0x64, 0x44,0x7C,0x04,0x7C },	// y
	{ 0x00,0x00,0x7C,0x44, 0x1C,0x70,0x64,0x7C },	// z

	{ 0x00,0x38,0x30,0x30, 0x60,0x30,0x30,0x38 },	// {
	{ 0x00,0x10,0x10,0x10, 0x10,0x10,0x10,0x10 },	// |
	{ 0x00,0x1C,0x0C,0x0C, 0x06,0x0C,0x0C,0x1C },	// }
	{ 0x00,0x00,0x00,0x06, 0xFE,0x70,0x00,0x00 },	// ~

	{ 0xFF,0x81,0x81,0x81, 0x81,0x81,0x81,0xFF },	// for undefined char
};
bool t2kFontInit(const Font *inFont=kComputerfontFace);
#else
bool t2kFontInit(const Font *inFont);
#endif

#ifndef T2K_DO_NOT_DEFINE_EXTRA_PATTERNS
// ________ 00
// _OO_____ 60
// _OOOO___ 78
// _OOOOOO_ 7E
// _OOOO___ 78
// _OO_____ 60
// ________ 00
// ________ 00
const uint8_t T2K_TrianglePatternRight[8]={
	0x00,0x60,0x78,0x7E,0x78,0x60,0x00,0x00,
};

#endif

void t2kPutChar(int inX,int inY,uint8_t inRGB332,char inChar);
void t2kPutStr(int inX,int inY,uint8_t inRGB332,const char *inString);

// NOTE:
// The actual length of the output string should not exceed 255 characters
// (the internal buffer length is only 256 bytes, including the null-terminated string).
// Also, since there is only one internal buffer, this function is NOT thread-safe.
void t2kPrintf(int inX,int inY,uint8_t inRGB332,const char *inFormat,...);

// centering
void t2kPrintf(int inY,uint8_t inRGB332,const char *inFormat,...);

void t2kDrawFontPattern(int inX,int inY,uint8_t inRGB332,const uint8_t *inPattern);

#endif

